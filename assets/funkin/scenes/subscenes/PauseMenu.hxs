import flixel.util.FlxStringUtil;
import funkin.Controls;
import scenes.OptionsMenu;

var freakyMenu:Sound;

var grpMenuShit:FlxGroup;

var defaultMenuItems:Array<String> = [
    'Resume', 
    'Restart Song',
    'Skip Time',
    'Change Difficulty', 
    'Toggle Practice Mode',
    'Configure Options',
    'Exit To Menu'
];

var menuItems:Array<String> = defaultMenuItems;

var changingDifficulty:Bool = false;

var curSelected:Int = 0;

var practiceMode:FlxText;

var timeTxt:FlxText;

var pauseMusic:FlxSound;

var curTime:Float = Conductor.position;

function create() {
    FlxG.sound.music.pause();
    PlayState.vocals.pause();

    if(curTime < 0)
        curTime = 0;

    pauseMusic = new FlxSound();
    pauseMusic.loadEmbedded(Paths.music('breakfast'), true, true);
    pauseMusic.volume = 0;
    pauseMusic.play(false, FlxG.random.int(0, Std.int(pauseMusic.length / 2)));

    if(!Settings.get("Developer Mode")) {
        defaultMenuItems.remove("Skip Time");
        menuItems = defaultMenuItems;
    }

    FlxG.sound.list.add(pauseMusic);

    freakyMenu = Paths.music("freakyMenu");

    var bg:FlxSprite = new FlxSprite();
    bg.makeGraphic(FlxG.width, FlxG.height, FlxColor.BLACK);
    bg.alpha = 0;
    add(bg);

    var levelInfo:FlxText = new FlxText(20, 15, 0, PlayState_.songName, 32);
    levelInfo.setFormat(Paths.font("vcr"), 32);
    levelInfo.updateHitbox();
    add(levelInfo);

    var levelDifficulty:FlxText = new FlxText(20, 15 + 32, 0, PlayState_.currentDifficulty.toUpperCase(), 32);
    levelDifficulty.setFormat(Paths.font('vcr'), 32);
    levelDifficulty.updateHitbox();
    add(levelDifficulty);

    practiceMode = new FlxText(20, 0, 0, "PRACTICE MODE", 32);
    practiceMode.setFormat(Paths.font('vcr'), 32);
    practiceMode.updateHitbox();
    practiceMode.y = FlxG.height - (practiceMode.height + 20);
    add(practiceMode);

    levelDifficulty.alpha = 0;
    levelInfo.alpha = 0;

    levelInfo.x = FlxG.width - (levelInfo.width + 20);
    levelDifficulty.x = FlxG.width - (levelDifficulty.width + 20);
    practiceMode.x = FlxG.width - (practiceMode.width + 20);

    grpMenuShit = new FlxGroup();
    add(grpMenuShit);

    FlxTween.tween(bg, {alpha: 0.6}, 0.4, {ease: FlxEase.quartInOut});
    FlxTween.tween(levelInfo, {alpha: 1, y: 20}, 0.4, {ease: FlxEase.quartInOut, startDelay: 0.3});
    FlxTween.tween(levelDifficulty, {alpha: 1, y: levelDifficulty.y + 5}, 0.4, {ease: FlxEase.quartInOut, startDelay: 0.5});

    timeTxt = new FlxText(0, 0, 0, "0:00 / 0:00", 64);
    timeTxt.scrollFactor.set();
    timeTxt.setFormat(Paths.font('vcr'), 64);
    timeTxt.updateHitbox();
    timeTxt.screenCenter();
    timeTxt.x += 150;
    timeTxt.y += 20;
    timeTxt.setBorderStyle(FlxTextBorderStyle.OUTLINE, FlxColor.BLACK, 5);
    timeTxt.visible = false;
    add(timeTxt);

    spawnOptions();

    changeSelection(0);

    substate.cameras = [PlayState.camOther];

    if(PlayState.countdownTimer != null)
        PlayState.countdownTimer.active = false;
}

function spawnOptions() {
    while(grpMenuShit.length > 0) {
        var bemb = grpMenuShit.members[0];
        bemb.kill();
        bemb.destroy();
        grpMenuShit.remove(bemb, true);
    }

    if(PlayState.availableDifficulties.length <= 1)
        menuItems.remove("Change Difficulty");

    for(i in 0...menuItems.length) {
        var songText:Alphabet = new Alphabet(0, (70 * i) + 30, menuItems[i], true);
        songText.isMenuItem = true;
        songText.targetY = i;
        grpMenuShit.add(songText);
    }

    curSelected = 0;
    changeSelection(0);
}

var holdTimer:Float = 0.0;

function update(elapsed) {
    practiceMode.visible = PlayState.practiceMode;

    if(pauseMusic.volume < 0.5)
        pauseMusic.volume += 0.01 * elapsed;

    if(Controls.UI_UP_P)
        changeSelection(-1);

    if(Controls.UI_DOWN_P)
        changeSelection(1);

    if(menuItems[curSelected] == "Skip Time") {
        timeTxt.setPosition(grpMenuShit.members[curSelected].x + 500, grpMenuShit.members[curSelected].y);
        if(Controls.UI_LEFT || Controls.UI_RIGHT)
            holdTimer += elapsed;
        else
            holdTimer = 0.0;

        if(Controls.UI_LEFT_P || Controls.UI_RIGHT_P || holdTimer > 0.5) {
            curTime += Controls.UI_LEFT ? -500 : 500;
            curTime = FlxMath.bound(curTime, 0, FlxG.sound.music.length);
            timeTxt.text = FlxStringUtil.formatTime(curTime/1000.0) + " / " + FlxStringUtil.formatTime(FlxG.sound.music.length/1000.0);

            if(holdTimer > 0.5)
                holdTimer = 0.475;
        }
    } else {
        holdTimer = 0.0;
    }

    if(Controls.ACCEPT_P) {
        if(changingDifficulty) {
            switch(menuItems[curSelected]) {
                case "Back":
                    changingDifficulty = false;
                    menuItems = defaultMenuItems;
                    spawnOptions();

                default:
                    changingDifficulty = false;
                    PlayState_.currentDifficulty = menuItems[curSelected];
                    PlayState_.SONG = SongLoader.returnSong(PlayState_.songName, menuItems[curSelected]);
                    Main.resetState();
                    PlayState_.paused = false;
            }
        } else {
            switch(menuItems[curSelected]) {
                case "Resume":
                    PlayState_.paused = false;
                    if(Conductor.position >= 0) {
                        FlxG.sound.music.play();
                        PlayState.vocals.play();
                        PlayState.resyncSong();
                    }

                    if(PlayState.countdownTimer != null)
                        PlayState.countdownTimer.active = true;

                    pauseMusic.stop();
                    pauseMusic.kill();
                    pauseMusic.destroy();

                    substate.close();

                case "Restart Song":
                    PlayState_.paused = false;
                    Main.resetState();

                case "Skip Time":
                    if(curTime != Conductor.position) {
                        PlayState.clearNotesBefore(curTime);

                        if(!PlayState.startedSong)
                            PlayState.startSong();

                        if(PlayState.countdownTimer != null)
                            PlayState.countdownTimer.cancel();
                
                        FlxG.sound.music.time = curTime;
                        FlxG.sound.music.play();
                
                        if (Conductor.position <= PlayState.vocals.length)
                            PlayState.vocals.time = curTime;
                        
                        PlayState.vocals.play();
                        Conductor.position = curTime;

                        if(curTime >= FlxG.sound.music.length)
                            PlayState.endSong();

                        Conductor.update();
                    }

                    PlayState_.paused = false;

                    pauseMusic.stop();
                    pauseMusic.kill();
                    pauseMusic.destroy();

                    substate.close();
                    
                case "Change Difficulty":
                    changingDifficulty = true;
                    menuItems = PlayState.availableDifficulties.copy();
                    menuItems.push("Back");
                    spawnOptions();

                case "Toggle Practice Mode":
                    PlayState.practiceMode = !PlayState.practiceMode;

                    if(PlayState.practiceMode)
                        PlayState.usedPractice = true;

                case "Configure Options":
                    PlayState_.paused = false;
                    FlxG.sound.playMusic(freakyMenu);
                    Main.switchScene(new OptionsMenu());
                    OptionsMenu.sceneInfo = {
                        scene: PlayState_,
                        args: []
                    };

                case "Exit To Menu":
                    PlayState_.paused = false;
                    FlxG.sound.playMusic(freakyMenu);
                    if(PlayState_.isStoryMode)
                        Main.switchScene(new ScriptedScene("StoryMenu"));
                    else
                        Main.switchScene(new ScriptedScene("FreeplayMenu"));
            }
        }
    }
}

function changeSelection(change:Int) {
    curSelected += change;

    if(curSelected < 0)
        curSelected = menuItems.length - 1;

    if(curSelected > menuItems.length - 1)
        curSelected = 0;

    for(i in 0...grpMenuShit.length) {
        grpMenuShit.members[i].targetY = i - curSelected;
        grpMenuShit.members[i].alpha = curSelected == i ? 1 : 0.6;
    }

    timeTxt.visible = menuItems[curSelected] == "Skip Time";
    timeTxt.text = FlxStringUtil.formatTime(curTime/1000.0) + " / " + FlxStringUtil.formatTime(FlxG.sound.music.length/1000.0);

    FlxG.sound.play(Paths.sound("menus/scrollMenu"));
}

function destroy() {
    if(PlayState.countdownTimer != null)
        PlayState.countdownTimer.active = true;
    pauseMusic.stop();
    pauseMusic.kill();
    pauseMusic.destroy();
}