import funkin.Controls;
import funkin.gameplay.Highscore;

var songs:Array<FreeplaySong> = [];

var bg:Sprite;

var grpSongs:FlxGroup;
var grpIcons:FlxGroup;

var colorTween:FlxTween;
var curSelected:Int = 0;
var curDifficulty:Int = 1;
var curSpeed:Float = 1;

var scrollMenu = Paths.sound("menus/scrollMenu");
var cancelMenu = Paths.sound("menus/cancelMenu");

var scoreBG:FlxSprite;
var scoreText:FlxText;
var diffText:FlxText;
var lerpScore:Float = 0;
var intendedScore:Int = 0;

var songBPMs:Array<Float> = [];

function create() {
    DiscordRPC.changePresence(
        "In the Freeplay Menu",
        null
    );
    
    bg = new Sprite().load("IMAGE", Paths_.image("menuBGDesat"));
    add(bg);

    grpSongs = new FlxGroup();
    add(grpSongs);

    grpIcons = new FlxGroup();
    add(grpIcons);

    songs = Paths.json("freeplaySongs").songs;
    for(i in 0...songs.length) {
        var song = songs[i];

        if(song.bpm != null)
            songBPMs.push(song.bpm);
        else {
            var dumbJSON = SongLoader.returnSong(song.name, song.difficulties[0]);
            if(dumbJSON != null)
                songBPMs.push(dumbJSON.bpm);
            else
                songBPMs.push(100.0);
        };

        var displayName:String = song.displayname != null ? song.displayname : song.name;
        var text:Alphabet = new Alphabet(0, (70 * i) + 30, displayName, true);
        text.isMenuItem = true;
        text.targetY = i;
        grpSongs.add(text);

        var icon:HealthIcon = new HealthIcon(song.icon);
        icon.sprTracker = text;
        grpIcons.add(icon);
    }

    scoreText = new FlxText(FlxG.width * 0.7, 5, 0, "", 32);
    scoreText.setFormat(Paths.font("vcr"), 32, FlxColor.WHITE, FlxTextAlign.RIGHT);

    scoreBG = new FlxSprite(scoreText.x - 6, 0).makeGraphic(1, 66, 0xFF000000);
    scoreBG.alpha = 0.6;
    add(scoreBG);

    diffText = new FlxText(scoreText.x, scoreText.y + 36, 0, "", 24);
    diffText.font = scoreText.font;
    add(diffText);

    add(scoreText);

    changeSelection(0);
}

function positionHighscore() {
    scoreText.x = FlxG.width - scoreText.width - 6;
    scoreBG.scale.x = FlxG.width - scoreText.x + 6;
    scoreBG.x = FlxG.width - scoreBG.scale.x / 2;
    diffText.x = scoreBG.x + scoreBG.width / 2;
    diffText.x -= diffText.width / 2;
}

function update(delta:Float) {
    if(Controls.BACK_P) {
        FlxG.sound.play(cancelMenu);
        Main.switchScene(new ScriptedScene("MainMenu"));
    }

    lerpScore = FlxMath.lerp(lerpScore, intendedScore, delta * 60 * 0.4);

    scoreText.text = "PERSONAL BEST:" + Math.round(lerpScore);
    positionHighscore();

    if(Controls.UI_UP_P)
        changeSelection(-1);
    if(Controls.UI_DOWN_P)
        changeSelection(1);

    if(Controls.UI_LEFT_P)
        changeDiff(-1);
    if(Controls.UI_RIGHT_P)
        changeDiff(1);

    if(Controls.ACCEPT_P) {
        var song = songs[curSelected];

        var displayName:String = song.displayname != null ? song.displayname : song.name;
        PlayState_.SONG = SongLoader.returnSong(song.name, song.difficulties[curDifficulty]);
        PlayState_.songName = displayName;
        PlayState_.currentDifficulty = song.difficulties[curDifficulty];
        PlayState_.availableDifficulties = song.difficulties;
        PlayState_.isStoryMode = false;
        PlayState_.songMultiplier = curSpeed;
        Main.switchScene(new PlayState_());
    }
}

function changeSelection(change:Int) {
    curSelected += change;
    if(curSelected < 0)
        curSelected = songs.length - 1;
    if(curSelected > songs.length - 1)
        curSelected = 0;

    if(colorTween != null)
        colorTween.cancel();

    var c = songs[curSelected].color;
    var color;
    if(Std.isOfType(c, String))
        color = FlxColor.fromString(c);
    else
        color = FlxColor.fromRGB(c[0], c[1], c[2]);

    colorTween = FlxTween.color(bg, 0.35, bg.color, color);

    var i:Int = 0;
    grpSongs.forEach(function(a:Alphabet) {
        a.targetY = i - curSelected;
        a.alpha = curSelected == i ? 1 : 0.6;
        i++;
    });

    intendedScore = Highscore.getScore(songs[curSelected].name+"-"+songs[curSelected].difficulties[curDifficulty]);

    FlxG.sound.play(scrollMenu);
    changeDiff(0);
}

function changeDiff(change:Int) {
    curDifficulty += change;

    if (curDifficulty < 0)
        curDifficulty = songs[curSelected].difficulties.length-1;
    if (curDifficulty > songs[curSelected].difficulties.length-1)
        curDifficulty = 0;

    intendedScore = Highscore.getScore(songs[curSelected].name+"-"+songs[curSelected].difficulties[curDifficulty]);

    diffText.text = '< ' + songs[curSelected].difficulties[curDifficulty].toUpperCase() + ' >';
    positionHighscore();
}