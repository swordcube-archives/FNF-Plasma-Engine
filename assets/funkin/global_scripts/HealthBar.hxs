import modding.Script;
import flixel.ui.FlxBarFillDirection;
import flixel.ui.FlxBar;
import funkin.Ranking;

var iconBumpScript;

var scoreDivider:String = " â€¢ ";

function createAfterUI() {
    var healthColors = [
        PlayState.dad != null ? PlayState.dad.healthBarColor : 0xFFff0000, // opponent
        PlayState.bf != null ? PlayState.bf.healthBarColor : 0xFF00ff00, // player
    ];

    UI.healthBarBG = new Sprite(0, !Settings.get("Downscroll") ? FlxG.height * 0.9 : 72);
    UI.healthBarBG.load("IMAGE", Paths_.image("ui/healthBar"));
    UI.healthBarBG.screenCenter(FlxAxes.X);
    UI.add(UI.healthBarBG);

    UI.healthBar = new FlxBar(
        UI.healthBarBG.x + 7, 
        UI.healthBarBG.y + 5, 
        FlxBarFillDirection.RIGHT_TO_LEFT, 
        UI.healthBarBG.width - 14, 
        UI.healthBarBG.height - 10, 
        PlayState, 
        "health", 
        PlayState.minHealth, 
        PlayState.maxHealth
    );
    UI.healthBar.createFilledBar(healthColors[0], healthColors[1]);
    UI.add(UI.healthBar);

    UI.iconP1 = new HealthIcon(PlayState.bf != null ? PlayState.bf.healthIcon : "template", true);
    UI.iconP1.y = UI.healthBar.y - (UI.iconP1.height / 2);
    UI.add(UI.iconP1);

    UI.iconP2 = new HealthIcon(PlayState.dad != null ? PlayState.dad.healthIcon : "template", false);
    UI.iconP2.y = UI.healthBar.y - (UI.iconP2.height / 2);
    UI.add(UI.iconP2);

    UI.scoreTxt = new FlxText(0, UI.healthBarBG.y + 35, 0, "test");
    UI.scoreTxt.setFormat(Paths.font("vcr"), 17, FlxColor.WHITE, FlxTextAlign.CENTER);
    UI.scoreTxt.setBorderStyle(FlxTextBorderStyle.OUTLINE, FlxColor.BLACK, 1);
    UI.scoreTxt.antialiasing = Settings.get("Antialiasing");
    UI.add(UI.scoreTxt);

    for(obj in [UI.healthBarBG, UI.healthBar, UI.iconP2, UI.iconP1, UI.scoreTxt]) {
        obj.alpha = 0.001;
        FlxTween.tween(obj, {alpha: 1}, 0.5, {ease: FlxEase.circOut, startDelay: 0.45});
    }

    updateScoreText();
    updateIcons();

    iconBumpScript = Script.createScript("icon_styles/"+Settings.get("Icon Style"));
    if(iconBumpScript.type == "hscript")
        iconBumpScript.setScriptObject(PlayState);
    iconBumpScript.start();
}

function playerNoteHit(note) {
    updateScoreText();
}

function updateScoreText() {
    UI.scoreTxt.text = (
        "Score: " + PlayState.songScore + scoreDivider +
        "Misses: " + PlayState.songMisses + scoreDivider +
        "Accuracy: " + FlxMath.roundDecimal(PlayState.songAccuracy*100.0, 2) + "%" +
        " [" + Ranking.getRank(PlayState.songAccuracy*100.0) + "]"
    );
    if(PlayState.botPlay)
        UI.scoreTxt.text += scoreDivider + "[BOTPLAY]";

    UI.scoreTxt.screenCenter(FlxAxes.X);
}

function update(delta) {
    iconBumpScript.call("onUpdate", [delta]);
    iconBumpScript.call("update", [delta]);
    iconBumpScript.call("onProcess", [delta]);
    iconBumpScript.call("process", [delta]);
}

function updatePost(delta) {
    iconBumpScript.call("onUpdatePost", [delta]);
    iconBumpScript.call("updatePost", [delta]);
    iconBumpScript.call("onProcessPost", [delta]);
    iconBumpScript.call("processPost", [delta]);

    if(UI.healthBar.percent < 20) {
        UI.iconP2.animation.play("winning");
        UI.iconP1.animation.play("losing");
    } else if(UI.healthBar.percent > 80) {
        UI.iconP2.animation.play("losing");
        UI.iconP1.animation.play("winning");
    } else {
        UI.iconP2.animation.play("normal");
        UI.iconP1.animation.play("normal");
    }

    updateIcons();
}

function updateIcons() {
    var healthBar = UI.healthBar;
    var iconP2 = UI.iconP2;
    var iconP1 = UI.iconP1;

    var iconOffset:Int = 26;
    iconP1.x = healthBar.x + (healthBar.width * (FlxMath.remapToRange(healthBar.percent, 0, 100, 100, 0) * 0.01) - iconOffset);
    iconP2.x = healthBar.x + (healthBar.width * (FlxMath.remapToRange(healthBar.percent, 0, 100, 100, 0) * 0.01)) - (iconP2.width - iconOffset);
}

function beatHit(curBeat:Int) {
    iconBumpScript.call("beatHit", [curBeat]);
}